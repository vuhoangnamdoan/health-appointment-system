# Generated by Django 4.2.7 on 2025-05-29 08:22

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('user_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('first_name', models.CharField(max_length=100)),
                ('last_name', models.CharField(max_length=100)),
                ('role', models.CharField(choices=[('patient', 'Patient'), ('doctor', 'Doctor')], max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
        ),
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('phone', models.CharField(blank=True, max_length=20, null=True)),
                ('dob', models.DateField(verbose_name='Date of Birth')),
                ('address1', models.CharField(max_length=255, verbose_name='Primary Address')),
                ('address2', models.CharField(blank=True, max_length=255, null=True, verbose_name='Secondary Address')),
                ('city', models.CharField(max_length=100)),
                ('state', models.CharField(max_length=100)),
                ('zip_code', models.CharField(max_length=20)),
                ('identity_id', models.CharField(max_length=50, unique=True, verbose_name='Identity ID')),
                ('blood_type', models.CharField(blank=True, choices=[('A', 'A'), ('B', 'B'), ('AB', 'AB'), ('O', 'O'), ('R', 'R')], max_length=2, null=True)),
                ('weight', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, verbose_name='Weight (kg)')),
                ('height', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, verbose_name='Height (cm)')),
                ('emergency_contact_name', models.CharField(blank=True, max_length=100, null=True)),
                ('emergency_contact_phone', models.CharField(blank=True, max_length=20, null=True)),
                ('emergency_contact_relationship', models.CharField(blank=True, max_length=100, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Patient',
                'verbose_name_plural': 'Patients',
                'indexes': [models.Index(fields=['identity_id'], name='users_patie_identit_f1fcbb_idx'), models.Index(fields=['dob'], name='users_patie_dob_50fc71_idx')],
            },
        ),
        migrations.CreateModel(
            name='Doctor',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('speciality', models.CharField(choices=[('Mental', 'Mental Health'), ('General', 'General Medicine'), ('Density', 'Dentistry'), ('Physiotherapy', 'Physiotherapy'), ('Chiropractic', 'Chiropractic'), ('Audiology', 'Audiology'), ('Optometry', 'Optometry')], max_length=50)),
                ('dob', models.DateField(verbose_name='Date of Birth')),
                ('experience', models.PositiveIntegerField(verbose_name='Years of Experience')),
                ('working_day', models.CharField(blank=True, help_text='Enter working days as numbers (1-7): 1=Monday, 2=Tuesday, etc. Example: 1,2,4,6', max_length=20, verbose_name='Working Days')),
                ('from_time', models.TimeField(verbose_name='Working hours from')),
                ('to_time', models.TimeField(verbose_name='Working hours to')),
                ('description', models.TextField(verbose_name='Professional Description')),
                ('is_available', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Doctor',
                'verbose_name_plural': 'Doctors',
                'ordering': ['user__first_name', 'user__last_name'],
                'indexes': [models.Index(fields=['speciality'], name='users_docto_special_6457bd_idx'), models.Index(fields=['is_available'], name='users_docto_is_avai_a8b8cd_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['email'], name='users_user_email_6f2530_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['role'], name='users_user_role_36d76d_idx'),
        ),
    ]
